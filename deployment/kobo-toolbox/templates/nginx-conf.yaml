apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-nginx-base
  namespace: {{ .Release.Namespace }}
data:
  nginx.conf: |
    user www-data;
    worker_processes auto;
    pid /run/nginx.pid;

    # Read this environment variable from docker-composer YAML file to disable HTTPS redirection.
    env PUBLIC_REQUEST_SCHEME;

    events {
      worker_connections 2048;
      # multi_accept on;
    }

    http {
      ##
      # Basic Settings
      ##

      sendfile on;
      tcp_nopush on;
      tcp_nodelay on;
      keepalive_timeout 65;
      types_hash_max_size 2048;
      # server_tokens off;

      server_names_hash_bucket_size 64;
      # server_name_in_redirect off;

      include /etc/nginx/mime.types;
      default_type application/octet-stream;

      ##
      # SSL Settings
      ##

      ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
      ssl_prefer_server_ciphers on;

      ##
      # Logging Settings
      ##

      log_format with_host '$http_host |Â $remote_addr - $upstream_http_x_kobonaut [$time_local] '
                            '"$request" $status ($body_bytes_sent bytes) "$http_referer" '
                            '"$http_user_agent"';

      #####################
      # Gzip Settings
      #####################

      gzip on;
      gzip_disable "msie6";

      ##
      # Virtual Host Configs
      ##
      include /etc/nginx/conf.d/*.conf;
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-nginx-confd
  namespace: {{ .Release.Namespace }}
data:
  default.conf: |
    {{- include "nginx_conf" .  | nindent 4 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-nginx-includes
  namespace: {{ .Release.Namespace }}
data:
  https_redirection.conf: |
    # Get real ip from ELB
    set_real_ip_from 10.0.0.0/8;
    set_real_ip_from 172.0.0.0/8;
    set_real_ip_from 192.168.0.0/16;
    real_ip_header X-Forwarded-For;

    set $redirect_https "O";
    set $public_request_scheme http;

    # ELB check
    if ($remote_addr = "127.0.0.1") {
        set $redirect_https "";
    }

    # if host is internal. We don't want to be redirected to HTTPS
    if ($host ~ ^(kc|kf|ee)\.$) {
        set $redirect_https "";
    }

    # if $public_request_scheme equals http, we don't want to be redirected
    if ($public_request_scheme = "http") {
        set $redirect_https "";
    }

    if ($http_x_forwarded_proto != "https") {
        set $redirect_https "${redirect_https}K";
    }

    # `http://` KC URLs are somehow getting into the EE Redis, and then EE
    # can't submit due to receiving a 301 on POST. Temporarily bypass
    # redirection for submissions
    if ($request_uri ~ "/submission") {
        set $redirect_https "NOPE";
    }

    if ($redirect_https = "OK") {
        return 301 https://$server_name$request_uri;
    }
  server_directive_common.conf: |
    # Allow 100M upload
    client_max_body_size 100M;

    # Support bigger headers. Useful for huge cookies
    large_client_header_buffers 8 16k;

    include /etc/nginx/includes/https_redirection.conf;
